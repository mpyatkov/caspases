#+TITLE:     Novel apoptotic mediators identified by conservation of vertebrate caspase targets (pipeline)
#+AUTHOR:    Max Pyatkov

This document provides some notes about processing related with caspase cleavage sites research

#+EMAIL:     test@test.com

#+DESCRIPTION: This document catalogs a set of scripts which allow to everyone reproduce this research

#+KEYWORDS:  caspases, n-rule, cleavage sites, apoptosis
#+LANGUAGE:  en
#+OPTIONS:   H:4
#+OPTIONS:   num:nil
#+OPTIONS:   toc:2
#+OPTIONS:   p:t
#+OPTIONS: author:nil date:nil

* COMMENT VARS :noexport:
#+MACRO: table_with_sites TABLE###

* Preparing databases and software
** Software

   Almost all information was obtained from this [[https://bioinf.shenwei.me/taxonkit/tutorial/#making-nr-blastdb-for-specific-taxids][source]]. I used one directory for soft and databases and for R scripts I used separated  subdirectory *caspases* which just clone of this repository.
   
   Main software which I used:
   - [[https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.9.0+-x64-linux.tar.gz][NCBI BLAST+]]
   - [[https://github.com/shenwei356/csvtk/releases/download/v0.18.2/csvtk_linux_amd64.tar.gz][CSVTK]]
   - [[https://github.com/shenwei356/seqkit/releases/download/v0.10.2/seqkit_linux_amd64.tar.gz][SEQKIT]]
   - pigz was installed using apt
   - all soft have links in *~/bin*

** Download and prepare NR database, obtain subset of Vertebrates
  - Download last NR (non-redundant) database (not in one FASTA file, because headers don't presented very well in FASTA).

#+BEGIN_SRC shell
  mkdir calculations
  cd calculations
  wget -c 'https://ftp.ncbi.nlm.nih.gov/blast/db/v5/nr_v5.*.tar.gz'
#+END_SRC

  - Unpack all files to big prepared nr database

#+BEGIN_SRC shell
  cat nr.*.tar.gz | tar -zxvi -f - -C .
#+END_SRC

  - Extracting vertebrates subset
  Note. Actually you can use taxonkit to extract taxids for example as follows:

#+BEGIN_SRC shell
  mkdir -p ~/.taxonkit

  # download taxdump
  wget -c ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz
  tar -zxvf taxdump.tar.gz
  ln -s `realpath ./taxdump/names.dmp` ~/.taxonkit/names.dmp
  ln -s `realpath ./taxdump/nodes.dmp` ~/.taxonkit/nodes.dmp
  ln -s `realpath ./taxdump/delnodes.dmp` ~/.taxonkit/delnodes.dmp
  taxonkit list --ids 7742 --indent "" > 7742.txid
#+END_SRC

  or you can use [[https://www.ncbi.nlm.nih.gov/books/NBK179288/][entrez]] which in my case is slightly faster:

#+BEGIN_SRC shell
  # install entrez for get_species_taxids.sh
  # install path: $HOME/edirect

  sh -c "$(wget -q ftp://ftp.ncbi.nlm.nih.gov/entrez/entrezdirect/install-edirect.sh -O -)"

  cd ~

  /bin/bash perl -MNet::FTP -e \
 '$ftp = new Net::FTP("ftp.ncbi.nlm.nih.gov", Passive => 1); $ftp->login; $ftp->binary; $ftp->get("/entrez/entrezdirect/edirect.tar.gz");'

  gunzip -c edirect.tar.gz | tar xf -
  rm edirect.tar.gz
  builtin exit
  export PATH=$PATH:$HOME/edirect
  ./edirect/setup.sh
#+END_SRC

  - According to this [[https://ftp.ncbi.nlm.nih.gov/blast/db/v5/blastdbv5.pdf][manual]] I extract subset of vertebrates (id: 7742)
  #+BEGIN_SRC shell
  
  # obtain id of vertebrates
  # get_species_taxids.sh -n Vertebrates
  
  # obtain all taxids for species which are vertebrates
  get_species_taxids.sh -t 7742 > 7742.txid

  #+END_SRC  

  - Convert prepared database to FASTA subset
  #+BEGIN_SRC shell

    # strange step, converting nr to fasta. Why do not use FASTA from NCBI ftp? 
    # Well, main reason - more correct headers for sequences inside
    blastdbcmd -db nr_v5 -dbtype prot -entry all -outfmt "%f" -out - \
        | pigz -c > nr.fa.gz

    ## download and extract accession numbers which associated with vertebrates
    wget -c ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz
    pigz -dc prot.accession2taxid.gz \
        | csvtk grep -t -f taxid -P 7742.txids \
        | csvtk cut -t -f accession.version \
        | sed 1d \
    > 7742.acc

  #+END_SRC
  - Split FASTA headers to form as one organism - one sequence
    (header[org1][org2]seq ==> header[org1]seq header[org2]seq)
  #+BEGIN_SRC shell
  cat <(echo) <(pigz -dc nr.fa.gz) \
      | perl -e 'BEGIN{ $/ = "\n>"; <>; } while(<>){s/>$//;  $i = index $_, "\n"; $h = substr $_, 0, $i; $s = substr $_, $i+1; if ($h !~ />/) { print ">$_"; next; }; $h = ">$h"; while($h =~ />([^ ]+ .+?) ?(?=>|$)/g){ $h1 = $1; $h1 =~ s/^\W+//; print ">$h1\n$s";} } ' \
      | seqkit grep --delete-matched -f 7742.acc -o nr.7742.fa.gz

  #+END_SRC

  - Create final BLAST db which contains only vertebrates
  #+BEGIN_SRC shell
    pigz -dc nr.7742.fa.gz > nr.7742.fa

    makeblastdb -parse_seqids -in nr.7742.fa \
                -dbtype prot -out nr.7742 -max_file_sz 3000000000
  #+END_SRC
  
  On this step we have prepared BLAST DB which contains only Verterbrates and we can check it:

  #+BEGIN_SRC shell
    # test.sites contains some FASTA sequnces
    export BLASTDB=`pwd`
    time blastp -db nr.7742 -query ./test.sites \
         -outfmt "6 qaccver saccver stitle evalue score pident qseq sseq" \
         -out test10-1.tsv -num_alignments 8000 -num_threads 8 -evalue 1e-16
  #+END_SRC

** Processing part 
   - *Note*: I heavily used the [[https://www.tidyverse.org/][Tidyverse]] libraries in this study!
   - *Note*: All next work will produced in directory *caspases* which you can obtain using command:

#+BEGIN_SRC shell
  git clone https://github.com/mpyatkov/caspases.git
  cd caspases
#+END_SRC     

   - *SITES_60AA.txt* - file obtained from #TABLE_S1# using script *000-extractPep.R*.

#+BEGIN_SRC shell
  Rscript --vanilla 000-extractPep.R #TABLE_S1#
#+END_SRC

   - Getting the required base tables.

#+BEGIN_SRC shell
  sh processing.sh run######_1
#+END_SRC     
 
#+BEGIN_SRC shell :tangle processing.sh :exports "none"
  #!/bin/bash
  # processing.sh
  # run: sh ./processing.sh ./FASTAFILE

  FASTAFILE=$1
  OUTFILE="SITES_60AA"
  export BLASTDB=..`pwd`

  # 1. Extract all potential orthologs for vertebrates
  # ~ 3-4 hours depending on hardware

  blastp -db nr.7742 -query $FASTAFILE \
         -outfmt "6 qaccver saccver stitle evalue score pident qseq sseq" \
         -out $OUTFILE.tsv -num_alignments 8000 \
         -num_threads 8 -evalue 1e-16

  # 2. Filtering table FASTAFILE.tsv, removing duplicates
  # output: $FASTAFILE_TABLE_UNIQ_ORGS.csv  -- list of unique organisms
  # output: $FASTAFILE_1_SHORT.csv.gz       -- cleaned FASTAFILE.tsv table 
  Rscript --vanilla 00-remote-getshort.R $OUTFILE.tsv

  # 3. The number of sequences associated with each 
  # organism in NR BLAST database (proteom representativeness)

  ## grep -Po '(?<=\[).*(?=\]$)'            -- extract  ex. [Homo sapiens]$
  ## grep -E -v "\.|\[|\]|\,|=|-|\(|\/"     -- parse garbage
  ## sed -e 's/^ *//;s/ /,/'                -- remove spaces which used uniq
  ## grep -f $OUTFILE_TABLE_UNIQ_ORGS.csv -- get organisms from file

  cat nr.7742.fa | grep ">" | grep -Po '(?<=\[).*(?=\]$)' \
      | cut -d" " -f1,2 | sort | uniq -c | sort -n \
      | grep -E -v "\.|\[|\]|\,|=|-|\(|\/"  | sed -e 's/^ *//;s/ /,/' \
      | grep -f "$OUTFILE"_TABLE_UNIQ_ORGS.csv \
        > "$OUTFILE"_TABLE_ORG_PROT_COUNT.csv
#+END_SRC

   - (*OPTIONAL STEP*) Lineages for each organims was mainly obtained using Taxonkit, but because classification missing particular Classes, Orders, etc. I fill the empty values using other online servers (Wikipedia, ebi.uk, etc). Full table of lineages for species located here: *./caspases/TABLES/Basic_lineages.csv*

#+BEGIN_SRC shell
  cat SITES_60AA_TABLE_UNIQ_ORGS.csv \
      | taxonkit name2taxid -j 8 \
      | cut -f 2 | taxonkit lineage -j 8 \
      | taxonkit reformat -f "{c};{o};{f};{g};{s}" --miss-rank-repl "__" \
      | cut -f 3 > SITES_60AA_TABLE_SHORT_LINEAGES_TAXONKIT.tsv
#+END_SRC

As output of server part we need take 3 tables:
   - *SITES_60AA_SHORT.csv.gz* - "short" table contains filter version of big table obtained from BLAST (run######_1.tsv)
   - *SITES_60AA_TABLE_ORG_PROT_COUNT.csv* - table contains count of proteins for each organism
   - *SITES_60AA_TABLE_UNIQ_ORGS.csv* - table contains information about uniq organism, this table required only on previous step and can be obtained from "short" one at any moment.

** Obtaining all requred figures and tables
   All figures and tables will be located in the directories FIGURES and TABLES respectively. Detailed description for each step is described inside the files.

#+BEGIN_SRC shell
  # Additional routines:

  # Extract 60AA peptide from protein sequence
  000-extractPep.R
  # Uniprot extracting routines
  00-2019-uni-fasta.R

  # Correction of path resulting files
  # csv -> TABLES, png/pdf -> FIGURES
  00-file_path.R

  # Detecting site in orthologous sequence
  # Inexact hamming distance routines
  00-octet.R

  # Get lineages from various sources ritis, wikipedia,...
  00-2019-get-lineage.R

  # filter BLAST output (big table) and represent as short table,
  # without duplicates and other stuff
  00-remote-getshort.R

  # Main pipeline includes a lot of steps provide a lot of tables.
  # Some of steps consume large amount of time, because related with
  # online services. As example of such service is MUFOLD - online service
  # which predict secondary structure for peptide. Due to limitations all
  # calculations was made 2 days. All details are presented as commentary in
  # source files or placed in paper. But in any case, the speed of calculations
  # will depend only on what hardware you have.

  # Get table of representative organisms (fast)
  Rscript --vanilla 01-get-repr-table.R

  # Making multiple alignment (~ 1hour)
  Rscript --vanilla 021-get-60AA-alignment.R

  # Making distance matrice for organisms (~ 1 hour)
  Rscript --vanilla 022-get-distance.R

  # Making clustering plot and PCOA plot (fast)
  Rscript --vanilla 023-plot-PCOA-and-clustering.R

  # Auxilary tables with different statistics (fast)
  Rscript --vanilla 03-auxilary_tables.R

  # Calculations related with N-rule (fast)
  Rscript --vanilla 04-nrule.R

  # Predicting secondary structure for human 60AA (~ 2 days)
  Rscript --vanilla 051-domain_structure.R

  # Add info about hydrophobity to domain structure 
  Rscript --vanilla 052-hydrophobity_and_loop.R

#+END_SRC

** Thesaurus for "repr" table

| column name         | description                                                                                                                          |
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------|
| uni                 | Human Uniprot ID                                                                                                                     |
| pname               | Human gene symbol (Uniprot)                                                                                                          |
| gname               | Human proteine symbol (Uniprot)                                                                                                      |
| title               | Vertebrate gene name                                                                                                                |
| accesion            | Accession number of the vertebrate protein sequence                                                                                 |
| Class               | Class                                                                                                                                |
| Order               | Order                                                                                                                                |
| Family              | Family                                                                                                                               |
| Genus               | Genus                                                                                                                                |
| org                 | Species                                                                                                                              |
| count               | Number of vertebrate caspase targets in a species’s proteome                                                                        |
| totprot             | Total number of proteins in species’s proteome                                                                                       |
| qseq                | Human 60 amino acid query sequence                                                                                                   |
| hseq                | Vertebrate 60 amino acid sequence                                                                                                   |
| evalue              | pBLAST e-value for the vertebrate 60 amino acid sequence                                                                            |
| score               | pBLAST score for the vertebrate 60 amino acid sequence                                                                              |
| identity            | pBLAST identity for the vertebrate 60 amino acid sequence                                                                           |
| fullpep             | Human cleavage site                                                                                                                  |
| octet               | Vertebrate cleavage site                                                                                                            |
| found               | Vertebrate P1 amino acid                                                                                                            |
| found_type          | Vertebrate P1 amino acid – numerical. 1 — D, 0 — not D                                                                              |
| hamdist             | Hamming distance estimate between human and vertebrate cleavage sites                                                               |
| fullpep_nrule_amino | P1’ amino acid in human cleavage site                                                                                                |
| fullpep_stype       | Effect of P1’ amino acid in human cleavage site                                                                                      |
| fullpep_ntype       | Effect of P1’ amino acid in human celavage site – numerical. 2 — stab, 1 — cond destab, 0 — destab                                   |
| octet_nrule_amino   | P1’ amino acid in vertebrate cleavage site                                                                                          |
| octet_stype         | Effect of P1’ amino acid in vertebrate cleavage site                                                                                |
| octet_ntype         | Effect of P1’ amino acid in vertebrate cleavage site – numerical. 2 — stab, 1 — cond destab, 0 — destab                             |
| centerh             | Sum of hydrophobicity estimates for the central 20 amino acids in vertebrate 60 amino acid sequences                                |
| shifted_center      | Sum of hydrophobicity estimates for the central 20 amino acids  in vertebrate 60 amino acid sequences shifted to all-positive scale |
| Oest                | Hydrophobicity prevalence values in vertebrate 60 amino acid sequences                                                              |


* COMMENT Local vars :noexport:
   ;; Local Variables:
   ;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
   ;; End:
